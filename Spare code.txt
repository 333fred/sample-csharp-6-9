        public static string GenerateTestLicenseLinq()
        {
            var states = new string[] { "BC", "CA", "ID", "OR", "WA" };

            var range = Enumerable.Range(0, _random.Next(4, 8));
            return string.Join("", range.Select(x => RandomAlphaNum()));

            static string RandomAlphaNum() 
                => Convert.ToBoolean(_random.Next(0, 2))
                    ? ((char)('0' + _random.Next(0, 10))).ToString()
                    : ((char)('A' + _random.Next(0, 26))).ToString();
        }




        public static decimal CalculateToll(object vehicle)
        {
            if (vehicle is null)
            {
                throw new ArgumentNullException(nameof(vehicle));
            }
            switch (vehicle)
            {
                case Car c when c.Passengers == 0:
                    return carBase + 0.5m;
                case Car c when c.Passengers == 1:
                    return carBase;
                case Car c when c.Passengers == 2:
                    return carBase - 0.50m;
                case Car c:
                    return carBase - 1.00m;

                case Taxi t when t.Fares == 0:
                    return taxiBase + 1.0m;
                case Taxi t when t.Fares == 1:
                    return taxiBase;
                case Taxi t when t.Fares == 2:
                    return taxiBase - 0.50m;
                case Taxi t:
                    return taxiBase - 1.00m;

                case Bus b when ((double)b.Riders / b.Capacity) < 0.50:
                    return busBase + 2.00m;
                case Bus b when ((double)b.Riders / b.Capacity) > 0.90:
                    return busBase - 1.00m;
                case Bus b:
                    return busBase;

                case DeliveryTruck t when t.GrossWeightClass > 5000:
                    return deliveryTruckBase + 5.00m;
                case DeliveryTruck t when t.GrossWeightClass < 3000:
                    return deliveryTruckBase - 2.00m;
                case DeliveryTruck t:
                    return deliveryTruckBase;

                default:
                    throw new ArgumentException(message: "Not a known vehicle type", paramName: nameof(vehicle));
            };
        }



